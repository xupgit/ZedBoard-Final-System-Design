// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module toThreshold_Loop_LineBufferLoop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cols,
        rows,
        absvalueMat_data_stream_0_V_dout,
        absvalueMat_data_stream_0_V_empty_n,
        absvalueMat_data_stream_0_V_read,
        angleMat_data_stream_0_V_dout,
        angleMat_data_stream_0_V_empty_n,
        angleMat_data_stream_0_V_read,
        nmsupressionMat_data_stream_0_V_din,
        nmsupressionMat_data_stream_0_V_full_n,
        nmsupressionMat_data_stream_0_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_st2_fsm_1 = 10'b10;
parameter    ap_ST_st3_fsm_2 = 10'b100;
parameter    ap_ST_st4_fsm_3 = 10'b1000;
parameter    ap_ST_st5_fsm_4 = 10'b10000;
parameter    ap_ST_st6_fsm_5 = 10'b100000;
parameter    ap_ST_st7_fsm_6 = 10'b1000000;
parameter    ap_ST_st8_fsm_7 = 10'b10000000;
parameter    ap_ST_st9_fsm_8 = 10'b100000000;
parameter    ap_ST_st10_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv13_F00 = 13'b111100000000;
parameter    ap_const_lv12_780 = 12'b11110000000;
parameter    ap_const_lv32_2D = 32'b101101;
parameter    ap_const_lv32_5A = 32'b1011010;
parameter    ap_const_lv32_87 = 32'b10000111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] cols;
input  [31:0] rows;
input  [7:0] absvalueMat_data_stream_0_V_dout;
input   absvalueMat_data_stream_0_V_empty_n;
output   absvalueMat_data_stream_0_V_read;
input  [7:0] angleMat_data_stream_0_V_dout;
input   angleMat_data_stream_0_V_empty_n;
output   angleMat_data_stream_0_V_read;
output  [7:0] nmsupressionMat_data_stream_0_V_din;
input   nmsupressionMat_data_stream_0_V_full_n;
output   nmsupressionMat_data_stream_0_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg absvalueMat_data_stream_0_V_read;
reg angleMat_data_stream_0_V_read;
reg nmsupressionMat_data_stream_0_V_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm = 10'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_29;
wire   [10:0] tmp_fu_239_p1;
reg    ap_sig_bdd_55;
wire   [10:0] tmp_16_fu_243_p2;
wire   [10:0] tmp_42_fu_249_p1;
wire   [10:0] tmp_17_fu_253_p2;
wire   [10:0] row_fu_264_p2;
reg   [10:0] row_reg_711;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_71;
wire   [0:0] tmp_27_fu_270_p2;
reg   [0:0] tmp_27_reg_716;
wire   [0:0] exitcond4_fu_259_p2;
wire   [0:0] tmp_28_fu_275_p2;
reg   [0:0] tmp_28_reg_721;
reg   [31:0] filterMask_0_0_1_reg_726;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_88;
wire   [10:0] col_fu_289_p2;
reg   [10:0] col_reg_735;
wire   [0:0] tmp_32_fu_295_p2;
reg   [0:0] tmp_32_reg_740;
wire   [0:0] exitcond3_fu_284_p2;
reg   [12:0] lineBuffer_val_0_addr_reg_745;
wire   [0:0] tmp_33_fu_315_p2;
reg   [0:0] tmp_33_reg_750;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_106;
reg    ap_sig_bdd_112;
wire   [11:0] tmp_36_trn1_cast1_fu_319_p1;
reg   [11:0] tmp_36_trn1_cast1_reg_754;
wire   [7:0] lineBuffer_val_0_q0;
reg   [12:0] lineBuffer_val_0_addr_1_reg_769;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_129;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_137;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_146;
wire   [31:0] filterMask_1_1_1_fu_343_p1;
reg   [31:0] filterMask_1_1_1_reg_785;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_155;
reg    ap_sig_bdd_161;
wire   [31:0] filterMask_0_1_2_fu_347_p1;
reg   [31:0] filterMask_0_1_2_reg_791;
wire   [31:0] filterMask_2_1_1_fu_351_p1;
reg   [31:0] filterMask_2_1_1_reg_797;
wire   [0:0] tmp_52_fu_370_p2;
reg   [0:0] tmp_52_reg_803;
wire   [0:0] tmp_38_fu_387_p2;
reg   [0:0] tmp_38_reg_807;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_177;
wire   [0:0] or_cond_fu_404_p2;
reg   [0:0] or_cond_reg_812;
wire   [7:0] tmp_47_fu_410_p1;
reg   [7:0] tmp_47_reg_817;
wire   [0:0] tmp_44_fu_443_p2;
reg   [0:0] tmp_44_reg_825;
wire   [0:0] tmp_48_fu_478_p2;
reg   [0:0] tmp_48_reg_830;
wire   [0:0] tmp_50_fu_513_p2;
reg   [0:0] tmp_50_reg_835;
wire   [0:0] sel_tmp1_fu_525_p2;
reg   [0:0] sel_tmp1_reg_840;
wire   [0:0] sel_tmp6_fu_543_p2;
reg   [0:0] sel_tmp6_reg_845;
wire   [0:0] sel_tmp4_fu_561_p2;
reg   [0:0] sel_tmp4_reg_850;
reg   [12:0] lineBuffer_val_0_address0;
reg    lineBuffer_val_0_ce0;
reg    lineBuffer_val_0_we0;
reg   [7:0] lineBuffer_val_0_d0;
reg   [12:0] lineBuffer_val_0_address1;
reg    lineBuffer_val_0_ce1;
reg    lineBuffer_val_0_we1;
wire   [7:0] lineBuffer_val_0_d1;
wire   [7:0] lineBuffer_val_0_q1;
reg   [10:0] row5_reg_188;
reg   [10:0] col6_reg_199;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_221;
reg    ap_sig_bdd_227;
reg   [7:0] gep79_loc_reg_211;
reg   [7:0] gep77_loc_reg_222;
wire   [63:0] tmp_34_fu_310_p1;
wire   [63:0] tmp_36_fu_328_p1;
wire   [63:0] tmp_43_fu_333_p1;
wire   [63:0] tmp_46_fu_338_p1;
reg   [31:0] angle_value_1_fu_88;
wire   [31:0] angle_value_fu_355_p1;
reg   [31:0] filterMask_2_1_fu_92;
reg   [31:0] filterMask_2_0_fu_96;
reg   [31:0] filterMask_0_0_fu_100;
reg   [31:0] filterMask_0_1_fu_104;
reg   [31:0] filterMask_1_1_fu_108;
reg   [31:0] filterMask_1_0_fu_112;
wire   [12:0] tmp_36_trn1_cast_fu_300_p1;
wire   [12:0] p_addr3_fu_304_p2;
wire   [11:0] p_addr6_fu_323_p2;
wire   [0:0] tmp_51_fu_364_p2;
wire   [0:0] tmp_39_fu_393_p2;
wire   [0:0] tmp_40_fu_398_p2;
wire   [0:0] slt_fu_420_p2;
wire   [0:0] slt1_fu_431_p2;
wire   [0:0] rev_fu_425_p2;
wire   [0:0] rev1_fu_437_p2;
wire   [0:0] slt2_fu_455_p2;
wire   [0:0] slt3_fu_466_p2;
wire   [0:0] rev2_fu_460_p2;
wire   [0:0] rev3_fu_472_p2;
wire   [0:0] slt4_fu_490_p2;
wire   [0:0] slt5_fu_501_p2;
wire   [0:0] rev4_fu_495_p2;
wire   [0:0] rev5_fu_507_p2;
wire   [0:0] tmp_41_fu_414_p2;
wire   [0:0] sel_tmp_fu_519_p2;
wire   [0:0] sel_tmp5_demorgan_fu_531_p2;
wire   [0:0] tmp_45_fu_449_p2;
wire   [0:0] sel_tmp5_fu_537_p2;
wire   [0:0] sel_tmp12_demorgan_fu_549_p2;
wire   [0:0] tmp_49_fu_484_p2;
wire   [0:0] sel_tmp3_fu_555_p2;
wire   [7:0] v0_assign_1_s_fu_573_p3;
wire   [7:0] v0_assign_2_s_fu_579_p3;
wire   [7:0] sel_tmp2_fu_591_p3;
wire   [7:0] v0_assign_3_s_fu_585_p3;
wire   [7:0] sel_tmp7_fu_598_p3;
wire   [7:0] p_v0_assign_fu_567_p3;
wire   [7:0] sel_tmp8_fu_605_p3;
reg   [9:0] ap_NS_fsm;
reg    ap_sig_bdd_115;


toThreshold_Loop_LineBufferLoop_proc_lineBuffer_val_0 #(
    .DataWidth( 8 ),
    .AddressRange( 5760 ),
    .AddressWidth( 13 ))
lineBuffer_val_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( lineBuffer_val_0_address0 ),
    .ce0( lineBuffer_val_0_ce0 ),
    .we0( lineBuffer_val_0_we0 ),
    .d0( lineBuffer_val_0_d0 ),
    .q0( lineBuffer_val_0_q0 ),
    .address1( lineBuffer_val_0_address1 ),
    .ce1( lineBuffer_val_0_ce1 ),
    .we1( lineBuffer_val_0_we1 ),
    .d1( lineBuffer_val_0_d1 ),
    .q1( lineBuffer_val_0_q1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_fu_259_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~ap_sig_bdd_227)) begin
        col6_reg_199 <= col_reg_735;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond4_fu_259_p2 == ap_const_lv1_0))) begin
        col6_reg_199 <= ap_const_lv11_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        if ((ap_const_lv1_0 == tmp_32_reg_740)) begin
            gep77_loc_reg_222 <= lineBuffer_val_0_q0;
        end else if (~(ap_const_lv1_0 == tmp_32_reg_740)) begin
            gep77_loc_reg_222 <= gep79_loc_reg_211;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (ap_sig_bdd_115) begin
        if ((ap_const_lv1_0 == tmp_33_fu_315_p2)) begin
            gep79_loc_reg_211 <= lineBuffer_val_0_q0;
        end else if (~(ap_const_lv1_0 == tmp_33_fu_315_p2)) begin
            gep79_loc_reg_211 <= absvalueMat_data_stream_0_V_dout;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond3_fu_284_p2))) begin
        row5_reg_188 <= row_reg_711;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_55)) begin
        row5_reg_188 <= ap_const_lv11_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_lv1_0 == tmp_33_reg_750) & ~ap_sig_bdd_161)) begin
        angle_value_1_fu_88[0] <= angle_value_fu_355_p1[0];
angle_value_1_fu_88[1] <= angle_value_fu_355_p1[1];
angle_value_1_fu_88[2] <= angle_value_fu_355_p1[2];
angle_value_1_fu_88[3] <= angle_value_fu_355_p1[3];
angle_value_1_fu_88[4] <= angle_value_fu_355_p1[4];
angle_value_1_fu_88[5] <= angle_value_fu_355_p1[5];
angle_value_1_fu_88[6] <= angle_value_fu_355_p1[6];
angle_value_1_fu_88[7] <= angle_value_fu_355_p1[7];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        col_reg_735 <= col_fu_289_p2;
        filterMask_0_0_1_reg_726[0] <= filterMask_0_1_fu_104[0];
filterMask_0_0_1_reg_726[1] <= filterMask_0_1_fu_104[1];
filterMask_0_0_1_reg_726[2] <= filterMask_0_1_fu_104[2];
filterMask_0_0_1_reg_726[3] <= filterMask_0_1_fu_104[3];
filterMask_0_0_1_reg_726[4] <= filterMask_0_1_fu_104[4];
filterMask_0_0_1_reg_726[5] <= filterMask_0_1_fu_104[5];
filterMask_0_0_1_reg_726[6] <= filterMask_0_1_fu_104[6];
filterMask_0_0_1_reg_726[7] <= filterMask_0_1_fu_104[7];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~ap_sig_bdd_227)) begin
        filterMask_0_0_fu_100[0] <= filterMask_0_0_1_reg_726[0];
filterMask_0_0_fu_100[1] <= filterMask_0_0_1_reg_726[1];
filterMask_0_0_fu_100[2] <= filterMask_0_0_1_reg_726[2];
filterMask_0_0_fu_100[3] <= filterMask_0_0_1_reg_726[3];
filterMask_0_0_fu_100[4] <= filterMask_0_0_1_reg_726[4];
filterMask_0_0_fu_100[5] <= filterMask_0_0_1_reg_726[5];
filterMask_0_0_fu_100[6] <= filterMask_0_0_1_reg_726[6];
filterMask_0_0_fu_100[7] <= filterMask_0_0_1_reg_726[7];
        filterMask_0_1_fu_104[0] <= filterMask_0_1_2_reg_791[0];
filterMask_0_1_fu_104[1] <= filterMask_0_1_2_reg_791[1];
filterMask_0_1_fu_104[2] <= filterMask_0_1_2_reg_791[2];
filterMask_0_1_fu_104[3] <= filterMask_0_1_2_reg_791[3];
filterMask_0_1_fu_104[4] <= filterMask_0_1_2_reg_791[4];
filterMask_0_1_fu_104[5] <= filterMask_0_1_2_reg_791[5];
filterMask_0_1_fu_104[6] <= filterMask_0_1_2_reg_791[6];
filterMask_0_1_fu_104[7] <= filterMask_0_1_2_reg_791[7];
        filterMask_1_0_fu_112[0] <= filterMask_1_1_fu_108[0];
filterMask_1_0_fu_112[1] <= filterMask_1_1_fu_108[1];
filterMask_1_0_fu_112[2] <= filterMask_1_1_fu_108[2];
filterMask_1_0_fu_112[3] <= filterMask_1_1_fu_108[3];
filterMask_1_0_fu_112[4] <= filterMask_1_1_fu_108[4];
filterMask_1_0_fu_112[5] <= filterMask_1_1_fu_108[5];
filterMask_1_0_fu_112[6] <= filterMask_1_1_fu_108[6];
filterMask_1_0_fu_112[7] <= filterMask_1_1_fu_108[7];
        filterMask_1_1_fu_108[0] <= filterMask_1_1_1_reg_785[0];
filterMask_1_1_fu_108[1] <= filterMask_1_1_1_reg_785[1];
filterMask_1_1_fu_108[2] <= filterMask_1_1_1_reg_785[2];
filterMask_1_1_fu_108[3] <= filterMask_1_1_1_reg_785[3];
filterMask_1_1_fu_108[4] <= filterMask_1_1_1_reg_785[4];
filterMask_1_1_fu_108[5] <= filterMask_1_1_1_reg_785[5];
filterMask_1_1_fu_108[6] <= filterMask_1_1_1_reg_785[6];
filterMask_1_1_fu_108[7] <= filterMask_1_1_1_reg_785[7];
        filterMask_2_0_fu_96[0] <= filterMask_2_1_fu_92[0];
filterMask_2_0_fu_96[1] <= filterMask_2_1_fu_92[1];
filterMask_2_0_fu_96[2] <= filterMask_2_1_fu_92[2];
filterMask_2_0_fu_96[3] <= filterMask_2_1_fu_92[3];
filterMask_2_0_fu_96[4] <= filterMask_2_1_fu_92[4];
filterMask_2_0_fu_96[5] <= filterMask_2_1_fu_92[5];
filterMask_2_0_fu_96[6] <= filterMask_2_1_fu_92[6];
filterMask_2_0_fu_96[7] <= filterMask_2_1_fu_92[7];
        filterMask_2_1_fu_92[0] <= filterMask_2_1_1_reg_797[0];
filterMask_2_1_fu_92[1] <= filterMask_2_1_1_reg_797[1];
filterMask_2_1_fu_92[2] <= filterMask_2_1_1_reg_797[2];
filterMask_2_1_fu_92[3] <= filterMask_2_1_1_reg_797[3];
filterMask_2_1_fu_92[4] <= filterMask_2_1_1_reg_797[4];
filterMask_2_1_fu_92[5] <= filterMask_2_1_1_reg_797[5];
filterMask_2_1_fu_92[6] <= filterMask_2_1_1_reg_797[6];
filterMask_2_1_fu_92[7] <= filterMask_2_1_1_reg_797[7];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~ap_sig_bdd_161)) begin
        filterMask_0_1_2_reg_791[0] <= filterMask_0_1_2_fu_347_p1[0];
filterMask_0_1_2_reg_791[1] <= filterMask_0_1_2_fu_347_p1[1];
filterMask_0_1_2_reg_791[2] <= filterMask_0_1_2_fu_347_p1[2];
filterMask_0_1_2_reg_791[3] <= filterMask_0_1_2_fu_347_p1[3];
filterMask_0_1_2_reg_791[4] <= filterMask_0_1_2_fu_347_p1[4];
filterMask_0_1_2_reg_791[5] <= filterMask_0_1_2_fu_347_p1[5];
filterMask_0_1_2_reg_791[6] <= filterMask_0_1_2_fu_347_p1[6];
filterMask_0_1_2_reg_791[7] <= filterMask_0_1_2_fu_347_p1[7];
        filterMask_1_1_1_reg_785[0] <= filterMask_1_1_1_fu_343_p1[0];
filterMask_1_1_1_reg_785[1] <= filterMask_1_1_1_fu_343_p1[1];
filterMask_1_1_1_reg_785[2] <= filterMask_1_1_1_fu_343_p1[2];
filterMask_1_1_1_reg_785[3] <= filterMask_1_1_1_fu_343_p1[3];
filterMask_1_1_1_reg_785[4] <= filterMask_1_1_1_fu_343_p1[4];
filterMask_1_1_1_reg_785[5] <= filterMask_1_1_1_fu_343_p1[5];
filterMask_1_1_1_reg_785[6] <= filterMask_1_1_1_fu_343_p1[6];
filterMask_1_1_1_reg_785[7] <= filterMask_1_1_1_fu_343_p1[7];
        filterMask_2_1_1_reg_797[0] <= filterMask_2_1_1_fu_351_p1[0];
filterMask_2_1_1_reg_797[1] <= filterMask_2_1_1_fu_351_p1[1];
filterMask_2_1_1_reg_797[2] <= filterMask_2_1_1_fu_351_p1[2];
filterMask_2_1_1_reg_797[3] <= filterMask_2_1_1_fu_351_p1[3];
filterMask_2_1_1_reg_797[4] <= filterMask_2_1_1_fu_351_p1[4];
filterMask_2_1_1_reg_797[5] <= filterMask_2_1_1_fu_351_p1[5];
filterMask_2_1_1_reg_797[6] <= filterMask_2_1_1_fu_351_p1[6];
filterMask_2_1_1_reg_797[7] <= filterMask_2_1_1_fu_351_p1[7];
        tmp_52_reg_803 <= tmp_52_fu_370_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        lineBuffer_val_0_addr_1_reg_769[0] <= tmp_36_fu_328_p1[0];
lineBuffer_val_0_addr_1_reg_769[1] <= tmp_36_fu_328_p1[1];
lineBuffer_val_0_addr_1_reg_769[2] <= tmp_36_fu_328_p1[2];
lineBuffer_val_0_addr_1_reg_769[3] <= tmp_36_fu_328_p1[3];
lineBuffer_val_0_addr_1_reg_769[4] <= tmp_36_fu_328_p1[4];
lineBuffer_val_0_addr_1_reg_769[5] <= tmp_36_fu_328_p1[5];
lineBuffer_val_0_addr_1_reg_769[6] <= tmp_36_fu_328_p1[6];
lineBuffer_val_0_addr_1_reg_769[7] <= tmp_36_fu_328_p1[7];
lineBuffer_val_0_addr_1_reg_769[8] <= tmp_36_fu_328_p1[8];
lineBuffer_val_0_addr_1_reg_769[9] <= tmp_36_fu_328_p1[9];
lineBuffer_val_0_addr_1_reg_769[10] <= tmp_36_fu_328_p1[10];
lineBuffer_val_0_addr_1_reg_769[11] <= tmp_36_fu_328_p1[11];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond3_fu_284_p2))) begin
        lineBuffer_val_0_addr_reg_745 <= tmp_34_fu_310_p1;
        tmp_32_reg_740 <= tmp_32_fu_295_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        or_cond_reg_812 <= or_cond_fu_404_p2;
        sel_tmp1_reg_840 <= sel_tmp1_fu_525_p2;
        sel_tmp4_reg_850 <= sel_tmp4_fu_561_p2;
        sel_tmp6_reg_845 <= sel_tmp6_fu_543_p2;
        tmp_38_reg_807 <= tmp_38_fu_387_p2;
        tmp_44_reg_825 <= tmp_44_fu_443_p2;
        tmp_47_reg_817 <= tmp_47_fu_410_p1;
        tmp_48_reg_830 <= tmp_48_fu_478_p2;
        tmp_50_reg_835 <= tmp_50_fu_513_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        row_reg_711 <= row_fu_264_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond4_fu_259_p2 == ap_const_lv1_0))) begin
        tmp_27_reg_716 <= tmp_27_fu_270_p2;
        tmp_28_reg_721 <= tmp_28_fu_275_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_112)) begin
        tmp_33_reg_750 <= tmp_33_fu_315_p2;
        tmp_36_trn1_cast1_reg_754[0] <= tmp_36_trn1_cast1_fu_319_p1[0];
tmp_36_trn1_cast1_reg_754[1] <= tmp_36_trn1_cast1_fu_319_p1[1];
tmp_36_trn1_cast1_reg_754[2] <= tmp_36_trn1_cast1_fu_319_p1[2];
tmp_36_trn1_cast1_reg_754[3] <= tmp_36_trn1_cast1_fu_319_p1[3];
tmp_36_trn1_cast1_reg_754[4] <= tmp_36_trn1_cast1_fu_319_p1[4];
tmp_36_trn1_cast1_reg_754[5] <= tmp_36_trn1_cast1_fu_319_p1[5];
tmp_36_trn1_cast1_reg_754[6] <= tmp_36_trn1_cast1_fu_319_p1[6];
tmp_36_trn1_cast1_reg_754[7] <= tmp_36_trn1_cast1_fu_319_p1[7];
tmp_36_trn1_cast1_reg_754[8] <= tmp_36_trn1_cast1_fu_319_p1[8];
tmp_36_trn1_cast1_reg_754[9] <= tmp_36_trn1_cast1_fu_319_p1[9];
tmp_36_trn1_cast1_reg_754[10] <= tmp_36_trn1_cast1_fu_319_p1[10];
    end
end

/// absvalueMat_data_stream_0_V_read assign process. ///
always @ (tmp_33_fu_315_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_112)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == tmp_33_fu_315_p2) & ~ap_sig_bdd_112)) begin
        absvalueMat_data_stream_0_V_read = ap_const_logic_1;
    end else begin
        absvalueMat_data_stream_0_V_read = ap_const_logic_0;
    end
end

/// angleMat_data_stream_0_V_read assign process. ///
always @ (tmp_33_reg_750 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_bdd_161)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_lv1_0 == tmp_33_reg_750) & ~ap_sig_bdd_161)) begin
        angleMat_data_stream_0_V_read = ap_const_logic_1;
    end else begin
        angleMat_data_stream_0_V_read = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond4_fu_259_p2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_fu_259_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond4_fu_259_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_fu_259_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_221)
begin
    if (ap_sig_bdd_221) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_29)
begin
    if (ap_sig_bdd_29) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_71)
begin
    if (ap_sig_bdd_71) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_88)
begin
    if (ap_sig_bdd_88) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_106)
begin
    if (ap_sig_bdd_106) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_129)
begin
    if (ap_sig_bdd_129) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_137)
begin
    if (ap_sig_bdd_137) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_146)
begin
    if (ap_sig_bdd_146) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_155)
begin
    if (ap_sig_bdd_155) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_177)
begin
    if (ap_sig_bdd_177) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// lineBuffer_val_0_address0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or lineBuffer_val_0_addr_reg_745 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st6_fsm_5 or tmp_34_fu_310_p1 or tmp_36_fu_328_p1 or tmp_43_fu_333_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        lineBuffer_val_0_address0 = tmp_43_fu_333_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        lineBuffer_val_0_address0 = lineBuffer_val_0_addr_reg_745;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        lineBuffer_val_0_address0 = tmp_36_fu_328_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        lineBuffer_val_0_address0 = tmp_34_fu_310_p1;
    end else begin
        lineBuffer_val_0_address0 = 'bx;
    end
end

/// lineBuffer_val_0_address1 assign process. ///
always @ (lineBuffer_val_0_addr_1_reg_769 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6 or tmp_46_fu_338_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        lineBuffer_val_0_address1 = lineBuffer_val_0_addr_1_reg_769;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        lineBuffer_val_0_address1 = tmp_46_fu_338_p1;
    end else begin
        lineBuffer_val_0_address1 = 'bx;
    end
end

/// lineBuffer_val_0_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_112 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st6_fsm_5)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_112) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5))) begin
        lineBuffer_val_0_ce0 = ap_const_logic_1;
    end else begin
        lineBuffer_val_0_ce0 = ap_const_logic_0;
    end
end

/// lineBuffer_val_0_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        lineBuffer_val_0_ce1 = ap_const_logic_1;
    end else begin
        lineBuffer_val_0_ce1 = ap_const_logic_0;
    end
end

/// lineBuffer_val_0_d0 assign process. ///
always @ (absvalueMat_data_stream_0_V_dout or ap_sig_cseq_ST_st4_fsm_3 or lineBuffer_val_0_q0 or ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        lineBuffer_val_0_d0 = lineBuffer_val_0_q0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        lineBuffer_val_0_d0 = absvalueMat_data_stream_0_V_dout;
    end else begin
        lineBuffer_val_0_d0 = 'bx;
    end
end

/// lineBuffer_val_0_we0 assign process. ///
always @ (tmp_32_reg_740 or tmp_33_fu_315_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_112 or ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == tmp_33_fu_315_p2) & ~ap_sig_bdd_112) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_32_reg_740)))) begin
        lineBuffer_val_0_we0 = ap_const_logic_1;
    end else begin
        lineBuffer_val_0_we0 = ap_const_logic_0;
    end
end

/// lineBuffer_val_0_we1 assign process. ///
always @ (tmp_32_reg_740 or ap_sig_cseq_ST_st6_fsm_5)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_32_reg_740))) begin
        lineBuffer_val_0_we1 = ap_const_logic_1;
    end else begin
        lineBuffer_val_0_we1 = ap_const_logic_0;
    end
end

/// nmsupressionMat_data_stream_0_V_write assign process. ///
always @ (tmp_52_reg_803 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_bdd_227)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_lv1_0 == tmp_52_reg_803) & ~ap_sig_bdd_227)) begin
        nmsupressionMat_data_stream_0_V_write = ap_const_logic_1;
    end else begin
        nmsupressionMat_data_stream_0_V_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_55 or exitcond4_fu_259_p2 or exitcond3_fu_284_p2 or ap_sig_bdd_112 or ap_sig_bdd_161 or ap_sig_bdd_227)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_55) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond4_fu_259_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_284_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~ap_sig_bdd_112) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            if (~ap_sig_bdd_161) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~ap_sig_bdd_227) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign angle_value_fu_355_p1 = angleMat_data_stream_0_V_dout;

/// ap_sig_bdd_106 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_106 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_112 assign process. ///
always @ (absvalueMat_data_stream_0_V_empty_n or tmp_33_fu_315_p2)
begin
    ap_sig_bdd_112 = ((absvalueMat_data_stream_0_V_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_33_fu_315_p2));
end

/// ap_sig_bdd_115 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_112)
begin
    ap_sig_bdd_115 = ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_112);
end

/// ap_sig_bdd_129 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_129 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_137 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_137 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_146 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_146 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_155 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_155 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_161 assign process. ///
always @ (angleMat_data_stream_0_V_empty_n or tmp_33_reg_750)
begin
    ap_sig_bdd_161 = ((angleMat_data_stream_0_V_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_33_reg_750));
end

/// ap_sig_bdd_177 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_177 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_221 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_221 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_227 assign process. ///
always @ (nmsupressionMat_data_stream_0_V_full_n or tmp_52_reg_803)
begin
    ap_sig_bdd_227 = ((nmsupressionMat_data_stream_0_V_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_52_reg_803));
end

/// ap_sig_bdd_29 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_29 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_55 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_55 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_71 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_71 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_88 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_88 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign col_fu_289_p2 = (col6_reg_199 + ap_const_lv11_1);
assign exitcond3_fu_284_p2 = (col6_reg_199 == tmp_16_fu_243_p2? 1'b1: 1'b0);
assign exitcond4_fu_259_p2 = (row5_reg_188 == tmp_17_fu_253_p2? 1'b1: 1'b0);
assign filterMask_0_1_2_fu_347_p1 = lineBuffer_val_0_q1;
assign filterMask_1_1_1_fu_343_p1 = gep77_loc_reg_222;
assign filterMask_2_1_1_fu_351_p1 = gep79_loc_reg_211;
assign lineBuffer_val_0_d1 = gep79_loc_reg_211;
assign nmsupressionMat_data_stream_0_V_din = ((tmp_38_reg_807)? p_v0_assign_fu_567_p3: sel_tmp8_fu_605_p3);
assign or_cond_fu_404_p2 = (tmp_39_fu_393_p2 | tmp_40_fu_398_p2);
assign p_addr3_fu_304_p2 = (tmp_36_trn1_cast_fu_300_p1 + ap_const_lv13_F00);
assign p_addr6_fu_323_p2 = (tmp_36_trn1_cast1_reg_754 + ap_const_lv12_780);
assign p_v0_assign_fu_567_p3 = ((or_cond_reg_812)? ap_const_lv8_0: tmp_47_reg_817);
assign rev1_fu_437_p2 = (slt1_fu_431_p2 ^ ap_const_lv1_1);
assign rev2_fu_460_p2 = (slt2_fu_455_p2 ^ ap_const_lv1_1);
assign rev3_fu_472_p2 = (slt3_fu_466_p2 ^ ap_const_lv1_1);
assign rev4_fu_495_p2 = (slt4_fu_490_p2 ^ ap_const_lv1_1);
assign rev5_fu_507_p2 = (slt5_fu_501_p2 ^ ap_const_lv1_1);
assign rev_fu_425_p2 = (slt_fu_420_p2 ^ ap_const_lv1_1);
assign row_fu_264_p2 = (row5_reg_188 + ap_const_lv11_1);
assign sel_tmp12_demorgan_fu_549_p2 = (sel_tmp5_demorgan_fu_531_p2 | tmp_45_fu_449_p2);
assign sel_tmp1_fu_525_p2 = (tmp_41_fu_414_p2 & sel_tmp_fu_519_p2);
assign sel_tmp2_fu_591_p3 = ((sel_tmp1_reg_840)? v0_assign_1_s_fu_573_p3: ap_const_lv8_7F);
assign sel_tmp3_fu_555_p2 = (sel_tmp12_demorgan_fu_549_p2 ^ ap_const_lv1_1);
assign sel_tmp4_fu_561_p2 = (tmp_49_fu_484_p2 & sel_tmp3_fu_555_p2);
assign sel_tmp5_demorgan_fu_531_p2 = (tmp_38_fu_387_p2 | tmp_41_fu_414_p2);
assign sel_tmp5_fu_537_p2 = (sel_tmp5_demorgan_fu_531_p2 ^ ap_const_lv1_1);
assign sel_tmp6_fu_543_p2 = (tmp_45_fu_449_p2 & sel_tmp5_fu_537_p2);
assign sel_tmp7_fu_598_p3 = ((sel_tmp6_reg_845)? v0_assign_2_s_fu_579_p3: sel_tmp2_fu_591_p3);
assign sel_tmp8_fu_605_p3 = ((sel_tmp4_reg_850)? v0_assign_3_s_fu_585_p3: sel_tmp7_fu_598_p3);
assign sel_tmp_fu_519_p2 = (tmp_38_fu_387_p2 ^ ap_const_lv1_1);
assign slt1_fu_431_p2 = ($signed(filterMask_1_1_fu_108) < $signed(filterMask_0_0_fu_100)? 1'b1: 1'b0);
assign slt2_fu_455_p2 = ($signed(filterMask_1_1_fu_108) < $signed(filterMask_1_1_1_reg_785)? 1'b1: 1'b0);
assign slt3_fu_466_p2 = ($signed(filterMask_1_1_fu_108) < $signed(filterMask_1_0_fu_112)? 1'b1: 1'b0);
assign slt4_fu_490_p2 = ($signed(filterMask_1_1_fu_108) < $signed(filterMask_0_1_2_reg_791)? 1'b1: 1'b0);
assign slt5_fu_501_p2 = ($signed(filterMask_1_1_fu_108) < $signed(filterMask_2_0_fu_96)? 1'b1: 1'b0);
assign slt_fu_420_p2 = ($signed(filterMask_1_1_fu_108) < $signed(filterMask_2_1_1_reg_797)? 1'b1: 1'b0);
assign tmp_16_fu_243_p2 = (tmp_fu_239_p1 + ap_const_lv11_1);
assign tmp_17_fu_253_p2 = (tmp_42_fu_249_p1 + ap_const_lv11_1);
assign tmp_27_fu_270_p2 = (row5_reg_188 < tmp_42_fu_249_p1? 1'b1: 1'b0);
assign tmp_28_fu_275_p2 = (row5_reg_188 != ap_const_lv11_0? 1'b1: 1'b0);
assign tmp_32_fu_295_p2 = (col6_reg_199 < tmp_fu_239_p1? 1'b1: 1'b0);
assign tmp_33_fu_315_p2 = (tmp_32_reg_740 & tmp_27_reg_716);
assign tmp_34_fu_310_p1 = p_addr3_fu_304_p2;
assign tmp_36_fu_328_p1 = p_addr6_fu_323_p2;
assign tmp_36_trn1_cast1_fu_319_p1 = col6_reg_199;
assign tmp_36_trn1_cast_fu_300_p1 = col6_reg_199;
assign tmp_38_fu_387_p2 = (angle_value_1_fu_88 == ap_const_lv32_0? 1'b1: 1'b0);
assign tmp_39_fu_393_p2 = ($signed(filterMask_1_1_fu_108) < $signed(filterMask_0_0_1_reg_726)? 1'b1: 1'b0);
assign tmp_40_fu_398_p2 = ($signed(filterMask_1_1_fu_108) < $signed(filterMask_2_1_fu_92)? 1'b1: 1'b0);
assign tmp_41_fu_414_p2 = (angle_value_1_fu_88 == ap_const_lv32_2D? 1'b1: 1'b0);
assign tmp_42_fu_249_p1 = rows[10:0];
assign tmp_43_fu_333_p1 = col6_reg_199;
assign tmp_44_fu_443_p2 = (rev_fu_425_p2 & rev1_fu_437_p2);
assign tmp_45_fu_449_p2 = (angle_value_1_fu_88 == ap_const_lv32_5A? 1'b1: 1'b0);
assign tmp_46_fu_338_p1 = col6_reg_199;
assign tmp_47_fu_410_p1 = filterMask_1_1_fu_108[7:0];
assign tmp_48_fu_478_p2 = (rev2_fu_460_p2 & rev3_fu_472_p2);
assign tmp_49_fu_484_p2 = (angle_value_1_fu_88 == ap_const_lv32_87? 1'b1: 1'b0);
assign tmp_50_fu_513_p2 = (rev4_fu_495_p2 & rev5_fu_507_p2);
assign tmp_51_fu_364_p2 = (col6_reg_199 != ap_const_lv11_0? 1'b1: 1'b0);
assign tmp_52_fu_370_p2 = (tmp_51_fu_364_p2 & tmp_28_reg_721);
assign tmp_fu_239_p1 = cols[10:0];
assign v0_assign_1_s_fu_573_p3 = ((tmp_44_reg_825)? tmp_47_reg_817: ap_const_lv8_0);
assign v0_assign_2_s_fu_579_p3 = ((tmp_48_reg_830)? tmp_47_reg_817: ap_const_lv8_0);
assign v0_assign_3_s_fu_585_p3 = ((tmp_50_reg_835)? tmp_47_reg_817: ap_const_lv8_0);
always @ (posedge ap_clk)
begin
    filterMask_0_0_1_reg_726[31:8] <= 24'b000000000000000000000000;
    tmp_36_trn1_cast1_reg_754[11] <= 1'b0;
    lineBuffer_val_0_addr_1_reg_769[12] <= 1'b0;
    filterMask_1_1_1_reg_785[31:8] <= 24'b000000000000000000000000;
    filterMask_0_1_2_reg_791[31:8] <= 24'b000000000000000000000000;
    filterMask_2_1_1_reg_797[31:8] <= 24'b000000000000000000000000;
    angle_value_1_fu_88[31:8] <= 24'b000000000000000000000000;
    filterMask_2_1_fu_92[31:8] <= 24'b000000000000000000000000;
    filterMask_2_0_fu_96[31:8] <= 24'b000000000000000000000000;
    filterMask_0_0_fu_100[31:8] <= 24'b000000000000000000000000;
    filterMask_0_1_fu_104[31:8] <= 24'b000000000000000000000000;
    filterMask_1_1_fu_108[31:8] <= 24'b000000000000000000000000;
    filterMask_1_0_fu_112[31:8] <= 24'b000000000000000000000000;
end



endmodule //toThreshold_Loop_LineBufferLoop_proc

