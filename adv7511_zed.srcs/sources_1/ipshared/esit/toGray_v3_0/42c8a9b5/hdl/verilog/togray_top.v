// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps
module togray_top (
s_axi_CONTROL_AWADDR,
s_axi_CONTROL_AWVALID,
s_axi_CONTROL_AWREADY,
s_axi_CONTROL_WDATA,
s_axi_CONTROL_WSTRB,
s_axi_CONTROL_WVALID,
s_axi_CONTROL_WREADY,
s_axi_CONTROL_BRESP,
s_axi_CONTROL_BVALID,
s_axi_CONTROL_BREADY,
s_axi_CONTROL_ARADDR,
s_axi_CONTROL_ARVALID,
s_axi_CONTROL_ARREADY,
s_axi_CONTROL_RDATA,
s_axi_CONTROL_RRESP,
s_axi_CONTROL_RVALID,
s_axi_CONTROL_RREADY,
interrupt,
aresetn,
aclk,
IN_STREAM_TDATA,
IN_STREAM_TKEEP,
IN_STREAM_TSTRB,
IN_STREAM_TUSER,
IN_STREAM_TLAST,
IN_STREAM_TID,
IN_STREAM_TDEST,
IN_STREAM_TVALID,
IN_STREAM_TREADY,
OUT_STREAM_TDATA,
OUT_STREAM_TKEEP,
OUT_STREAM_TSTRB,
OUT_STREAM_TUSER,
OUT_STREAM_TLAST,
OUT_STREAM_TID,
OUT_STREAM_TDEST,
OUT_STREAM_TVALID,
OUT_STREAM_TREADY
);

parameter C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter RESET_ACTIVE_LOW = 1;

input [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR ;
input s_axi_CONTROL_AWVALID ;
output s_axi_CONTROL_AWREADY ;
input [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA ;
input [C_S_AXI_CONTROL_DATA_WIDTH/8 - 1:0] s_axi_CONTROL_WSTRB ;
input s_axi_CONTROL_WVALID ;
output s_axi_CONTROL_WREADY ;
output [2 - 1:0] s_axi_CONTROL_BRESP ;
output s_axi_CONTROL_BVALID ;
input s_axi_CONTROL_BREADY ;
input [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR ;
input s_axi_CONTROL_ARVALID ;
output s_axi_CONTROL_ARREADY ;
output [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA ;
output [2 - 1:0] s_axi_CONTROL_RRESP ;
output s_axi_CONTROL_RVALID ;
input s_axi_CONTROL_RREADY ;
output interrupt ;

input aresetn ;

input aclk ;


input [24 - 1:0] IN_STREAM_TDATA ;
input [3 - 1:0] IN_STREAM_TKEEP ;
input [3 - 1:0] IN_STREAM_TSTRB ;
input [1 - 1:0] IN_STREAM_TUSER ;
input [1 - 1:0] IN_STREAM_TLAST ;
input [1 - 1:0] IN_STREAM_TID ;
input [1 - 1:0] IN_STREAM_TDEST ;
input IN_STREAM_TVALID ;
output IN_STREAM_TREADY ;


output [8 - 1:0] OUT_STREAM_TDATA ;
output [1 - 1:0] OUT_STREAM_TKEEP ;
output [1 - 1:0] OUT_STREAM_TSTRB ;
output [1 - 1:0] OUT_STREAM_TUSER ;
output [1 - 1:0] OUT_STREAM_TLAST ;
output [1 - 1:0] OUT_STREAM_TID ;
output [1 - 1:0] OUT_STREAM_TDEST ;
output OUT_STREAM_TVALID ;
input OUT_STREAM_TREADY ;


wire [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR;
wire s_axi_CONTROL_AWVALID;
wire s_axi_CONTROL_AWREADY;
wire [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA;
wire [C_S_AXI_CONTROL_DATA_WIDTH/8 - 1:0] s_axi_CONTROL_WSTRB;
wire s_axi_CONTROL_WVALID;
wire s_axi_CONTROL_WREADY;
wire [2 - 1:0] s_axi_CONTROL_BRESP;
wire s_axi_CONTROL_BVALID;
wire s_axi_CONTROL_BREADY;
wire [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR;
wire s_axi_CONTROL_ARVALID;
wire s_axi_CONTROL_ARREADY;
wire [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA;
wire [2 - 1:0] s_axi_CONTROL_RRESP;
wire s_axi_CONTROL_RVALID;
wire s_axi_CONTROL_RREADY;
wire interrupt;

wire aresetn;


wire [32 - 1:0] sig_toGray_cols;
wire [32 - 1:0] sig_toGray_rows;
wire sig_toGray_ap_start;
wire sig_toGray_ap_ready;
wire sig_toGray_ap_done;
wire sig_toGray_ap_idle;

wire sig_toGray_ap_rst_n;



toGray toGray_U(
    .cols(sig_toGray_cols),
    .rows(sig_toGray_rows),
    .ap_start(sig_toGray_ap_start),
    .ap_ready(sig_toGray_ap_ready),
    .ap_done(sig_toGray_ap_done),
    .ap_idle(sig_toGray_ap_idle),
    .ap_rst_n(sig_toGray_ap_rst_n),
    .ap_clk(aclk),
    .IN_STREAM_TDATA(IN_STREAM_TDATA),
    .IN_STREAM_TKEEP(IN_STREAM_TKEEP),
    .IN_STREAM_TSTRB(IN_STREAM_TSTRB),
    .IN_STREAM_TUSER(IN_STREAM_TUSER),
    .IN_STREAM_TLAST(IN_STREAM_TLAST),
    .IN_STREAM_TID(IN_STREAM_TID),
    .IN_STREAM_TDEST(IN_STREAM_TDEST),
    .IN_STREAM_TVALID(IN_STREAM_TVALID),
    .IN_STREAM_TREADY(IN_STREAM_TREADY),
    .OUT_STREAM_TDATA(OUT_STREAM_TDATA),
    .OUT_STREAM_TKEEP(OUT_STREAM_TKEEP),
    .OUT_STREAM_TSTRB(OUT_STREAM_TSTRB),
    .OUT_STREAM_TUSER(OUT_STREAM_TUSER),
    .OUT_STREAM_TLAST(OUT_STREAM_TLAST),
    .OUT_STREAM_TID(OUT_STREAM_TID),
    .OUT_STREAM_TDEST(OUT_STREAM_TDEST),
    .OUT_STREAM_TVALID(OUT_STREAM_TVALID),
    .OUT_STREAM_TREADY(OUT_STREAM_TREADY)
);

toGray_CONTROL_if #(
    .C_ADDR_WIDTH(C_S_AXI_CONTROL_ADDR_WIDTH),
    .C_DATA_WIDTH(C_S_AXI_CONTROL_DATA_WIDTH))
toGray_CONTROL_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .I_cols(sig_toGray_cols),
    .I_rows(sig_toGray_rows),
    .I_ap_start(sig_toGray_ap_start),
    .O_ap_ready(sig_toGray_ap_ready),
    .O_ap_done(sig_toGray_ap_done),
    .O_ap_idle(sig_toGray_ap_idle),
    .AWADDR(s_axi_CONTROL_AWADDR),
    .AWVALID(s_axi_CONTROL_AWVALID),
    .AWREADY(s_axi_CONTROL_AWREADY),
    .WDATA(s_axi_CONTROL_WDATA),
    .WSTRB(s_axi_CONTROL_WSTRB),
    .WVALID(s_axi_CONTROL_WVALID),
    .WREADY(s_axi_CONTROL_WREADY),
    .BRESP(s_axi_CONTROL_BRESP),
    .BVALID(s_axi_CONTROL_BVALID),
    .BREADY(s_axi_CONTROL_BREADY),
    .ARADDR(s_axi_CONTROL_ARADDR),
    .ARVALID(s_axi_CONTROL_ARVALID),
    .ARREADY(s_axi_CONTROL_ARREADY),
    .RDATA(s_axi_CONTROL_RDATA),
    .RRESP(s_axi_CONTROL_RRESP),
    .RVALID(s_axi_CONTROL_RVALID),
    .RREADY(s_axi_CONTROL_RREADY),
    .interrupt(interrupt));

toGray_ap_rst_n_if #(
    .RESET_ACTIVE_LOW(RESET_ACTIVE_LOW))
ap_rst_n_if_U(
    .dout(sig_toGray_ap_rst_n),
    .din(aresetn));

endmodule
